"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/experiences/new/page",{

/***/ "(app-pages-browser)/./src/lib/apiClient.ts":
/*!******************************!*\
  !*** ./src/lib/apiClient.ts ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkApiHealth: () => (/* binding */ checkApiHealth),\n/* harmony export */   createExperience: () => (/* binding */ createExperience),\n/* harmony export */   deleteExperience: () => (/* binding */ deleteExperience),\n/* harmony export */   getExperienceById: () => (/* binding */ getExperienceById),\n/* harmony export */   listExperiences: () => (/* binding */ listExperiences),\n/* harmony export */   updateExperience: () => (/* binding */ updateExperience)\n/* harmony export */ });\n// src/lib/apiClient.ts\n// Use Next.js API routes as proxy to avoid CORS issues\nconst baseUrl = \"/api\";\n// Helper function to handle API requests with better error handling\nasync function apiRequest(endpoint) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const url = \"\".concat(baseUrl).concat(endpoint);\n    const defaultOptions = {\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\"\n        },\n        cache: \"no-store\",\n        ...options\n    };\n    console.log(\"API Request: \".concat(options.method || \"GET\", \" \").concat(url));\n    try {\n        const response = await fetch(url, defaultOptions);\n        console.log(\"API Response: \".concat(response.status, \" \").concat(response.statusText));\n        if (!response.ok) {\n            let errorMessage = \"Error \".concat(response.status, \": \").concat(response.statusText);\n            try {\n                const errorData = await response.json();\n                errorMessage = errorData.message || errorData.error || errorMessage;\n            } catch (e) {\n            // If we can't parse the error response, use the default message\n            }\n            throw new Error(errorMessage);\n        }\n        // Handle empty responses (204 No Content)\n        if (response.status === 204) {\n            return undefined;\n        }\n        const data = await response.json();\n        console.log(\"API Data received:\", data);\n        return data;\n    } catch (error) {\n        console.error(\"API Error for \".concat(url, \":\"), error);\n        // Enhanced error handling for common scenarios\n        if (error instanceof TypeError && error.message.includes(\"Failed to fetch\")) {\n            throw new Error(\"No se pudo conectar con el servidor. Asegúrate de que el servidor API esté ejecutándose en el puerto 5028.\");\n        }\n        throw error;\n    }\n}\nasync function listExperiences(params) {\n    const queryParams = new URLSearchParams();\n    if (params === null || params === void 0 ? void 0 : params.search) queryParams.set(\"search\", params.search);\n    if (params === null || params === void 0 ? void 0 : params.type) queryParams.set(\"type\", params.type);\n    if (params === null || params === void 0 ? void 0 : params.page) queryParams.set(\"page\", String(params.page));\n    if (params === null || params === void 0 ? void 0 : params.pageSize) queryParams.set(\"pageSize\", String(params.pageSize));\n    if (params === null || params === void 0 ? void 0 : params.onlyActive) queryParams.set(\"onlyActive\", \"true\");\n    const endpoint = \"/api/experiences\".concat(queryParams.toString() ? \"?\".concat(queryParams.toString()) : \"\");\n    return apiRequest(endpoint);\n}\nasync function getExperienceById(id) {\n    try {\n        return await apiRequest(\"/api/experiences/\".concat(encodeURIComponent(id)));\n    } catch (error) {\n        // If it's a 404, return null instead of throwing\n        if (error instanceof Error && error.message.includes(\"404\")) {\n            return null;\n        }\n        throw error;\n    }\n}\nasync function createExperience(data) {\n    return apiRequest(\"/api/experiences\", {\n        method: \"POST\",\n        body: JSON.stringify(data)\n    });\n}\nasync function updateExperience(id, data) {\n    return apiRequest(\"/api/experiences/\".concat(encodeURIComponent(id)), {\n        method: \"PUT\",\n        body: JSON.stringify(data)\n    });\n}\nasync function deleteExperience(id) {\n    return apiRequest(\"/api/experiences/\".concat(encodeURIComponent(id)), {\n        method: \"DELETE\"\n    });\n}\n// Health check function to test API connectivity\nasync function checkApiHealth() {\n    try {\n        return await apiRequest(\"/api/health\");\n    } catch (error) {\n        console.error(\"API Health check failed:\", error);\n        throw error;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/apiClient.ts\n"));

/***/ })

});